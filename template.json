{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation template to deploy NodeJS Techincal Test",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "SSHLocation": {
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "HVM64"
            },
            "t2.nano": {
                "Arch": "HVM64"
            },
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            }
        },
        "AWSInstanceType2NATArch": {
            "t1.micro": {
                "Arch": "NATHVM64"
            },
            "t2.nano": {
                "Arch": "NATHVM64"
            },
            "t2.micro": {
                "Arch": "NATHVM64"
            },
            "t2.small": {
                "Arch": "NATHVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "ap-southeast-2": {
                "HVM64": "ami-09b42976632b27e9b",
                "HVMG2": "ami-0c0ab057a101d8ff2"
            }
        }
    },
    "Resources": {
        "WebServerInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "InstallAndRun": [
                            "Install",
                            "Configure"
                        ]
                    },
                    "Install": {
                        "packages": {
                            "yum": {
                                "git": [],
                                "curl": []
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource WebServerInstance ",
                                            "         --configsets InstallAndRun ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "Configure": {
                        "commands": {
                            "01_set_mysql_root_password": {
                                "command": {
                                    "Fn::Join": [
                                        "01_install_node_sources",
                                        [
                                            "sudo yum -y update"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [""
                                        ]
                                    ]
                                }
                            },
                             "02_install_nodejs": {
                                "command": {
                                    "Fn::Join": [
                                        "01_install_pm2",
                                        [
                                            "sudo yum -y install docker"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [""
                                        ]
                                    ]
                                }
                            },
                             "03 install pm2": {
                                "command": {
                                    "Fn::Join": [
                                        "01_install_pm2",
                                        [
                                            "sudo service docker start"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [""
                                        ]
                                    ]
                                }
                            },
                            "03 install pm2": {
                                "command": {
                                    "Fn::Join": [
                                        "01_install_pm2",
                                        [
                                            " sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [""
                                        ]
                                    ]
                                }
                            },
                            "04_download_files": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cd /srv && curl https://sb-tech-test.s3-ap-southeast-2.amazonaws.com/Dockerfile --output /srv/Dockerfile && git clone https://github.com/mcinnes/Express-API.git User-API"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            ""
                                        ]
                                    ]
                                }
                            },
                            "055_install_deps": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "curl https://sb-tech-test.s3-ap-southeast-2.amazonaws.com/env --output /srv/User-API/.env"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            ""
                                        ]
                                    ]
                                }
                            },
                            "05_install_deps": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cd /srv && sudo service docker start && sudo docker build . -t ec2-user/sb-test"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            ""
                                        ]
                                    ]
                                }
                            },
                            "06_run": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo service docker start && sudo docker run -p 80:3000 -d ec2-user/sb-test:latest"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            ""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "AWS::CloudFormation::Designer": {
                    "id": "1832b0db-b35e-4ded-bc59-886bc80fb1c2"
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerInstance ",
                                "         --configsets InstallAndRun ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerInstance ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M"
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "6f0b1671-42bc-4a9d-84d0-42303d3035f9"
                }
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Description": "URL for newly created App stack",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "WebServerInstance",
                                "PublicDnsName"
                            ]
                        }
                    ]
                ]
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Designer": {
            "6f0b1671-42bc-4a9d-84d0-42303d3035f9": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "1832b0db-b35e-4ded-bc59-886bc80fb1c2": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "6f0b1671-42bc-4a9d-84d0-42303d3035f9"
                ]
            }
        }
    }
}
